"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CallbackQueryEvent = exports.CallbackQuery = exports.NewCallbackQueryDefaults = void 0;
const common_1 = require("./common");
const tl_1 = require("../tl");
const Helpers_1 = require("../Helpers");
const Utils_1 = require("../Utils");
exports.NewCallbackQueryDefaults = {
    chats: [],
    fromUsers: [],
    blacklistUsers: [],
};
/**
 * Occurs whenever you sign in as a bot and a user
 * clicks one of the inline buttons on your messages.
 * Note that the `chats` parameter will **not** work with normal
 * IDs or peers if the clicked inline button comes from a "via bot"
 * message. The `chats` parameter also supports checking against the
 * `chat_instance` which should be used for inline callbacks.
 *
 * @example
 * ```ts
 * async function printQuery(event: NewCallbackQueryEvent) {
 *     // TODO
 * }
 * ```
 */
class CallbackQuery extends common_1.EventBuilder {
    constructor(inlineQueryParams = {}) {
        const { chats, func, pattern } = inlineQueryParams;
        super({ chats, func, blacklistChats: false });
        this.match = pattern;
        this._noCheck = [this.chats, this.func, this.match].every((i) => i === null || i === undefined);
    }
    build(update, callback, selfId = undefined) {
        if (update instanceof tl_1.Api.UpdateBotCallbackQuery) {
            return new CallbackQueryEvent(update, update.peer, update.msgId);
        }
        else if (update instanceof tl_1.Api.UpdateInlineBotCallbackQuery) {
            const b = Helpers_1.toSignedLittleBuffer(update.msgId.id, 8);
            const msgId = b.readInt32LE();
            const peerId = b.readInt32LE(4);
            const peer = peerId < 0
                ? new tl_1.Api.PeerChannel({ channelId: Helpers_1.returnBigInt(-peerId) })
                : new tl_1.Api.PeerUser({ userId: Helpers_1.returnBigInt(peerId) });
            return new CallbackQueryEvent(update, peer, msgId);
        }
    }
    filter(event) {
        if (this._noCheck)
            return event;
        if (this.chats) {
            let inside = this.chats.includes(event.query.chatInstance.toString());
            if (event.chatId) {
                inside = inside || this.chats.includes(event.chatId.toString());
            }
            if (inside === this.blacklistChats) {
                return;
            }
        }
        if (this.match) {
            const data = new TextDecoder().decode(event.query.data);
            const result = this.match.exec(data);
            if (result) {
                event.patternMatch = result;
            }
            else {
                return;
            }
        }
        if (this.func) {
            return this.func(event);
        }
        return true;
    }
}
exports.CallbackQuery = CallbackQuery;
class CallbackQueryEvent extends common_1.EventCommonSender {
    constructor(query, peer, msgId) {
        super({
            msgId,
            chatPeer: peer,
            broadcast: false,
        });
        this.query = query;
        this.patternMatch = undefined;
        this._senderId = Helpers_1.returnBigInt(query.userId);
        this._message = undefined;
        this._answered = false;
    }
    _setClient(client) {
        super._setClient(client);
        const [sender, inputSender] = Utils_1._getEntityPair(this._senderId.toString(), this._entities, client._entityCache);
        this._sender = sender;
        this._inputSender = inputSender;
    }
    get id() {
        return this.query.queryId;
    }
    get messageId() {
        return this._messageId;
    }
    get data() {
        return this.query.data;
    }
    get chatInstance() {
        return this.query.chatInstance;
    }
    async getMessage() {
        if (this._message) {
            return this._message;
        }
        const chat = this.isChannel ? await this.getInputChat() : undefined;
        const messages = await this._client.getMessages(chat, {
            ids: this._messageId,
        });
        this._message = messages[0];
        return this._message;
    }
    async _refetchSender() {
        if (this._entities.has(this.senderId.toString())) {
            this._sender = this._entities.get(this.senderId.toString());
        }
        if (!this._sender)
            return;
        this._inputSender = Utils_1.getInputPeer(this._chat);
        if (!this._inputSender.hasOwnProperty("accessHash")) {
            try {
                this._inputSender = this._client._entityCache.get(this._senderId);
            }
            catch (e) {
                const m = await this.getMessage();
                if (m) {
                    this._sender = m._sender;
                    this._inputSender = m._inputSender;
                }
            }
        }
    }
    async answer({ message, cacheTime, url, alert, } = {}) {
        if (this._answered)
            return;
        return await this._client.invoke(new tl_1.Api.messages.SetBotCallbackAnswer({
            queryId: this.query.queryId,
            cacheTime,
            alert,
            message,
            url,
        })).then((res) => {
            this._answered = true;
            return res;
        });
    }
    get viaInline() {
        return this.query instanceof tl_1.Api.UpdateInlineBotCallbackQuery;
    }
    async respond(params = {}) {
        await this.answer();
        const inputChat = await this.getInputChat();
        await this._client.sendMessage(inputChat, params);
    }
    async reply(params = {}) {
        await this.answer();
        params.replyTo = this.messageId;
        const inputChat = await this.getInputChat();
        await this._client.sendMessage(inputChat, params);
    }
    async edit(params) {
        if (this.query.msgId instanceof tl_1.Api.InputBotInlineMessageID) {
            return await this._client.editMessage(this.messageId, params).then(async (res) => {
                await this.answer();
                return res;
            });
        }
        else {
            const inputChat = await this.getInputChat();
            return await this._client.editMessage(inputChat, params).then(async (res) => {
                await this.answer();
                return res;
            });
        }
    }
    async delete({ revoke } = { revoke: false }) {
        if (this._client) {
            return this._client.deleteMessages(await this.getInputChat(), [this.messageId], { revoke });
        }
    }
    get sender() {
        return this._sender;
    }
}
exports.CallbackQueryEvent = CallbackQueryEvent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2FsbGJhY2tRdWVyeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2dyYW1qcy9ldmVudHMvQ2FsbGJhY2tRdWVyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxxQ0FBd0U7QUFDeEUsOEJBQTRCO0FBQzVCLHdDQUFnRTtBQUVoRSxvQ0FBd0Q7QUFXM0MsUUFBQSx3QkFBd0IsR0FBOEI7SUFDL0QsS0FBSyxFQUFFLEVBQUU7SUFDVCxTQUFTLEVBQUUsRUFBRTtJQUNiLGNBQWMsRUFBRSxFQUFFO0NBQ3JCLENBQUM7QUFFRjs7Ozs7Ozs7Ozs7Ozs7R0FjRztBQUNILE1BQWEsYUFBYyxTQUFRLHFCQUFZO0lBSzNDLFlBQVksb0JBQXdELEVBQUU7UUFDbEUsTUFBTSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsaUJBQWlCLENBQUM7UUFDbkQsS0FBSyxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUU5QyxJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQztRQUVyQixJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQ3JELENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxTQUFTLENBQ3ZDLENBQUM7SUFDTixDQUFDO0lBRUQsS0FBSyxDQUNELE1BQXdDLEVBQ3hDLFFBQW1CLEVBQ25CLE1BQU0sR0FBRyxTQUFTO1FBRWxCLElBQUksTUFBTSxZQUFZLFFBQUcsQ0FBQyxzQkFBc0IsRUFBRTtZQUM5QyxPQUFPLElBQUksa0JBQWtCLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3BFO2FBQU0s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