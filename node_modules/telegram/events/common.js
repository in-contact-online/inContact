"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventCommonSender = exports.EventCommon = exports.EventBuilder = exports._intoIdSet = void 0;
const tl_1 = require("../tl");
const custom_1 = require("../tl/custom");
const Helpers_1 = require("../Helpers");
const __1 = require("../");
const senderGetter_1 = require("../tl/custom/senderGetter");
const big_integer_1 = __importDefault(require("big-integer"));
const Utils_1 = require("../Utils");
/** @hidden */
async function _intoIdSet(client, chats) {
    if (chats == undefined) {
        return undefined;
    }
    if (!Helpers_1.isArrayLike(chats)) {
        chats = [chats];
    }
    const result = new Set();
    for (let chat of chats) {
        if (typeof chat == "number" ||
            typeof chat == "bigint" ||
            (typeof chat == "string" && Utils_1.parseID(chat)) ||
            big_integer_1.default.isInstance(chat)) {
            chat = Helpers_1.returnBigInt(chat);
            if (chat.lesser(0)) {
                result.add(chat.toString());
            }
            else {
                result.add(__1.utils.getPeerId(new tl_1.Api.PeerUser({
                    userId: chat,
                })));
                result.add(__1.utils.getPeerId(new tl_1.Api.PeerChat({
                    chatId: chat,
                })));
                result.add(__1.utils.getPeerId(new tl_1.Api.PeerChannel({
                    channelId: chat,
                })));
            }
        }
        else if (typeof chat == "object" &&
            chat.SUBCLASS_OF_ID == 0x2d45687) {
            result.add(__1.utils.getPeerId(chat));
        }
        else {
            chat = await client.getInputEntity(chat);
            if (chat instanceof tl_1.Api.InputPeerSelf) {
                chat = await client.getMe(true);
            }
            result.add(__1.utils.getPeerId(chat));
        }
    }
    return Array.from(result);
}
exports._intoIdSet = _intoIdSet;
/**
 * The common event builder, with builtin support to filter per chat.<br/>
 * All events inherit this.
 */
class EventBuilder {
    constructor(eventParams) {
        var _a;
        this.chats = (_a = eventParams.chats) === null || _a === void 0 ? void 0 : _a.map((x) => x.toString());
        this.blacklistChats = eventParams.blacklistChats || false;
        this.resolved = false;
        this.func = eventParams.func;
    }
    build(update, callback, selfId) {
        if (update)
            return update;
    }
    async resolve(client) {
        if (this.resolved) {
            return;
        }
        await this._resolve(client);
        this.resolved = true;
    }
    async _resolve(client) {
        this.chats = await _intoIdSet(client, this.chats);
    }
    filter(event) {
        if (!this.resolved) {
            return;
        }
        if (this.chats != undefined) {
            if (event.chatId == undefined) {
                return;
            }
            const inside = this.chats.includes(event.chatId.toString());
            if (inside == this.blacklistChats) {
                // If this chat matches but it's a blacklist ignore.
                // If it doesn't match but it's a whitelist ignore.
                return;
            }
        }
        if (this.func && !this.func(event)) {
            return;
        }
        return event;
    }
}
exports.EventBuilder = EventBuilder;
class EventCommon extends custom_1.ChatGetter {
    constructor({ chatPeer = undefined, msgId = undefined, broadcast = undefined, }) {
        super();
        this._eventName = "Event";
        custom_1.ChatGetter.initChatClass(this, { chatPeer, broadcast });
        this._entities = new Map();
        this._client = undefined;
        this._messageId = msgId;
    }
    _setClient(client) {
        this._client = client;
    }
    get client() {
        return this._client;
    }
}
exports.EventCommon = EventCommon;
class EventCommonSender extends senderGetter_1.SenderGetter {
    constructor({ chatPeer = undefined, msgId = undefined, broadcast = undefined, }) {
        super();
        this._eventName = "Event";
        custom_1.ChatGetter.initChatClass(this, { chatPeer, broadcast });
        senderGetter_1.SenderGetter.initChatClass(this, { chatPeer, broadcast });
        this._entities = new Map();
        this._client = undefined;
        this._messageId = msgId;
    }
    _setClient(client) {
        this._client = client;
    }
    get client() {
        return this._client;
    }
}
exports.EventCommonSender = EventCommonSender;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vZ3JhbWpzL2V2ZW50cy9jb21tb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsOEJBQTRCO0FBRTVCLHlDQUEwQztBQUcxQyx3Q0FBdUQ7QUFDdkQsMkJBQTRCO0FBQzVCLDREQUF5RDtBQUN6RCw4REFBaUM7QUFDakMsb0NBQW1DO0FBRW5DLGNBQWM7QUFDUCxLQUFLLFVBQVUsVUFBVSxDQUM1QixNQUFzQixFQUN0QixLQUE0QztJQUU1QyxJQUFJLEtBQUssSUFBSSxTQUFTLEVBQUU7UUFDcEIsT0FBTyxTQUFTLENBQUM7S0FDcEI7SUFDRCxJQUFJLENBQUMscUJBQVcsQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUNyQixLQUFLLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUNuQjtJQUNELE1BQU0sTUFBTSxHQUFnQixJQUFJLEdBQUcsRUFBVSxDQUFDO0lBQzlDLEtBQUssSUFBSSxJQUFJLElBQUksS0FBSyxFQUFFO1FBQ3BCLElBQ0ksT0FBTyxJQUFJLElBQUksUUFBUTtZQUN2QixPQUFPLElBQUksSUFBSSxRQUFRO1lBQ3ZCLENBQUMsT0FBTyxJQUFJLElBQUksUUFBUSxJQUFJLGVBQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUMxQyxxQkFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFDekI7WUFDRSxJQUFJLEdBQUcsc0JBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUMxQixJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ2hCLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7YUFDL0I7aUJBQU07Z0JBQ0gsTUFBTSxDQUFDLEdBQUcsQ0FDTixTQUFLLENBQUMsU0FBUyxDQUNYLElBQUksUUFBRyxDQUFDLFFBQVEsQ0FBQztvQkFDYixNQUFNLEVBQUUsSUFBSTtpQkFDZixDQUFDLENBQ0wsQ0FDSixDQUFDO2dCQUNGLE1BQU0sQ0FBQyxHQUFHLENBQ04sU0FBSyxDQUFDLFNBQVMsQ0FDWCxJQUFJLFFBQUcsQ0FBQyxRQUFRLENBQUM7b0JBQ2IsTUFBTSxFQUFFLElBQUk7aUJBQ2YsQ0FBQyxDQUNMLENBQ0osQ0FBQztnQkFDRixNQUFNLENBQUMsR0FBRyxDQUNOLFNBQUssQ0FBQyxTQUFTLENBQ1gsSUFBSSxRQUFHLENBQUMsV0FBVyxDQUFDO29CQUNoQixTQUFTLEVBQUUsSUFBSTtpQkFDbEIsQ0FBQyxDQUNMLENBQ0osQ0FBQzthQUNMO1NBQ0o7YUFBTSxJQUNILE9BQU8sSUFBSSxJQUFJLFFBQVE7WUFDdkIsSUFBSSxDQUFDLGNBQWMsSUFBSSxTQUFTLEVBQ2xDO1lBQ0UsTUFBTSxDQUFDLEdBQUcsQ0FBQyxTQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7U0FDckM7YUFBTTtZQUNILElBQUksR0FBRyxNQUFNLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDekMsSUFBSSxJQUFJLFlBQVksUUFBRyxDQUFDLGFBQWEsRUFBRTtnQkFDbkMsSUFBSSxHQUFHLE1BQU0sTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNuQztZQUNELE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQ3JDO0tBQ0o7SUFDRCxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDOUIsQ0FBQztBQTFERCxnQ0EwREM7QUF1QkQ7OztHQUdHO0FBQ0gsTUFBYSxZQUFZO0lBT3JCLFlBQVksV0FBa0M7O1FBQzFDLElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBQSxXQUFXLENBQUMsS0FBSywwQ0FBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQ3pELElBQUksQ0FBQyxjQUFjLEdBQUcsV0FBVyxDQUFDLGNBQWMsSUFBSSxLQUFLLENBQUM7UUFDMUQsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7UUFDdEIsSUFBSSxDQUFDLElBQUksR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDO0lBQ2pDLENBQUM7SUFFRCxLQUFLLENBQ0QsTUFBc0IsRUFDdEIsUUFBMkIsRUFDM0IsTUFBMEI7UUFFMUIsSUFBSSxNQUFNO1lBQUUsT0FBTyxNQUFNLENBQUM7SUFDOUIsQ0FBQztJQUVELEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBc0I7UUFDaEMsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2YsT0FBTztTQUNWO1FBQ0QsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzVCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQXNCO1FBQ2pDLElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxVQUFVLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQsTUFBTSxDQUNGLEtBQXNDO1FBRXRDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2hCLE9BQU87U0FDVjtRQUNELElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxTQUFTLEVBQUU7WUFDekIsSUFBSSxLQUFLLENBQUMsTUFBTSxJQUFJLFNBQVMsRUFBRTtnQkFDM0IsT0FBTzthQUNWO1lBQ0QsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1lBQzVELElBQUksTUFBTSxJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUU7Z0JBQy9CLG9EQUFvRDtnQkFDcEQsbURBQW1EO2dCQUNuRCxPQUFPO2FBQ1Y7U0FDSjtRQUNELElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDaEMsT0FBTztTQUNWO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQztDQUNKO0FBeERELG9DQXdEQztBQVFELE1BQWEsV0FBWSxTQUFRLG1CQUFVO0lBS3ZDLFlBQVksRUFDUixRQUFRLEdBQUcsU0FBUyxFQUNwQixLQUFLLEdBQUcsU0FBUyxFQUNqQixTQUFTLEdBQUcsU0FBUyxHQUNGO1FBQ25CLEtBQUssRUFBRSxDQUFDO1FBVFosZUFBVSxHQUFHLE9BQU8sQ0FBQztRQVVqQixtQkFBVSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUN4RCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7UUFDM0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUM7UUFDekIsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7SUFDNUIsQ0FBQztJQUVELFVBQVUsQ0FBQyxNQUFzQjtRQUM3QixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztJQUMxQixDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ04sT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3hCLENBQUM7Q0FDSjtBQXhCRCxrQ0F3QkM7QUFFRCxNQUFhLGlCQUFrQixTQUFRLDJCQUFZO0lBSy9DLFlBQVksRUFDUixRQUFRLEdBQUcsU0FBUyxFQUNwQixLQUFLLEdBQUcsU0FBUyxFQUNqQixTQUFTLEdBQUcsU0FBUyxHQUNGO1FBQ25CLEtBQUssRUFBRSxDQUFDO1FBVFosZUFBVSxHQUFHLE9BQU8sQ0FBQztRQVVqQixtQkFBVSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUN4RCwyQkFBWSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUMxRCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7UUFDM0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUM7UUFDekIsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7SUFDNUIsQ0FBQztJQUVELFVBQVUsQ0FBQyxNQUFzQjtRQUM3QixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztJQUMxQixDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ04sT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3hCLENBQUM7Q0FDSjtBQXpCRCw4Q0F5QkMifQ==